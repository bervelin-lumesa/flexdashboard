[
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Un tableau de bord est une représentation visuelle des indicateurs clés de performance (KPI) pour une entreprise ou une organisation. Cela permet de fournir en temps opportun une vue d’ensemble des indicateurs importants qui peuvent aider à mesurer l’état d’avancement dans la réalisation des objectifs stratégiques ou des objectifs opérationnels. Généralement, un tableau de bord est constitué de graphiques, de tableaux de données et d’autres visualisations pour aider les utilisateurs à mieux comprendre les données. Le but principal du tableau de bord est de montrer de manière claire et concise les résultats clés et les tendances de l’entreprise, afin de faciliter la prise de décisions rapides et éclairées."
  },
  {
    "objectID": "introduction.html#types-de-tableaux-de-bords",
    "href": "introduction.html#types-de-tableaux-de-bords",
    "title": "1  Introduction",
    "section": "1.2 Types de tableaux de bords",
    "text": "1.2 Types de tableaux de bords\nIl existe plusieurs types de tableaux de bord qui peuvent être utilisés en fonction des besoins d’une organisation, mais voici quelques exemples :\n\nTableau de bord stratégique : Ce type de tableau de bord est utilisé pour surveiller les objectifs à long terme d’une entreprise et pour suivre les progrès dans la réalisation de ces objectifs.\nTableau de bord opérationnel : Ce type de tableau de bord est utilisé pour suivre les activités quotidiennes de l’entreprise, telles que les ventes, les stocks, les délais d’exécution, les taux de conversion, les coûts de production, etc.\nTableau de bord financier : Ce type de tableau de bord est utilisé pour suivre les performances financières de l’entreprise, telles que les revenus, les bénéfices, les dépenses, les ratios financiers, etc.\nTableau de bord des ressources humaines : Ce type de tableau de bord est utilisé pour suivre les performances des employés de l’entreprise, les données de présence, les niveaux de recrutement, le taux de rotation, etc.\n\nEn somme, un tableau de bord peut être adapté en fonction des objectifs de l’entreprise et des informations nécessaires pour aider à la prise de décision et à l’amélioration des performances."
  },
  {
    "objectID": "introduction-rmarkdown.html",
    "href": "introduction-rmarkdown.html",
    "title": "2  Inroduction à Rmarkdown",
    "section": "",
    "text": "Le package Rmarkdown est un outil très pratique pour la production de documents dynamiques qui intègrent du code R, du texte formaté et des résultats d’analyse en un seul document. Il permet d’exporter ces documents dans différents formats tels que HTML, PDF, Word, etc., facilitant ainsi leur partage et leur diffusion.\nAvec Rmarkdown, les analyses sont plus faciles à comprendre et à reproduire, car le code et les résultats sont présentés de manière claire et cohérente.\nDe plus, Rmarkdown offre une grande flexibilité et permet de personnaliser l’apparence et la mise en page de manière rapide et facile.\nAvant toute chose, il faut d’abord installer le package Rmarkdown si cela n’est pas encore le cas. Cela demande une connexion internet."
  },
  {
    "objectID": "introduction-rmarkdown.html#créer-un-document-rmarkdown",
    "href": "introduction-rmarkdown.html#créer-un-document-rmarkdown",
    "title": "2  Inroduction à Rmarkdown",
    "section": "2.1 Créer un document Rmarkdown",
    "text": "2.1 Créer un document Rmarkdown\nUn document R Markdown est simplement un fichier texte enregistré avec l’extension .Rmd. Avec RStudio, on peut créer un nouveau document en allant dans le menu File puis en choisissant New file puis R Markdown…. La boîte de dialogue de la figure 2.1 s’affiche. Cliquez ensuite sur OK.\n\n\n\nCréation du document Rmardown"
  },
  {
    "objectID": "introduction-rmarkdown.html#eléments-dun-documents-rmarkdown",
    "href": "introduction-rmarkdown.html#eléments-dun-documents-rmarkdown",
    "title": "2  Inroduction à Rmarkdown",
    "section": "2.2 Eléments d’un documents Rmarkdown",
    "text": "2.2 Eléments d’un documents Rmarkdown\nUn document Rmarkdown comporte génalement trois parties. Il s’agit d’un en-tête, le texte di document et du code R.\n\n2.2.1 En-tête du document\nL’en-tête constitue la première partie du document. Il se trouve au début du document et est délimité par les trois tirets avant et après.\n---\ntitle: \"Untitled\"\nauthor: \"Bervelin Lumesa\"\ndate: \"2023-04-05\"\noutput: html_document\n---\nCette partie est très importante car elle contient des informations éssentielles sur le document comme son titre, le nom de l’auteur, la date de création et d’autres options permettant de personnaliser le document. L’option output: html_document permet de générer un document au format HTML.\n\n\n2.2.2 Texte du document\nC’est la partie du document où nous retrouvé du texte suivant la syntaxe Markdown. Avec Markdown, on peut facilement ajouter des titres, des listes, des liens, des images, et même des tableaux, en utilisant des symboles simples comme des astérisques, des crochets et des parenthèses. Le résultat final est un texte formaté de manière lisible\nLe code suivant montre comment mettre du texte en italique, en gras. Il montre comment créer des listes, des titres, des liens.\n\nDifférentes balises\n\n\nRmarkdown\nRésultats\n\n\n\n\n### Titre 3\n#### Titre 4\nTitre 1\nTitre 4\n\n\n*italique*\nitalique\n\n\ngras\ngras\n\n\n- html\n- pdf\n- word\n\nhtml\npdf\nword\n\n\n\n1. premier\n2. deuxième\n3. troisième\n\npremier\ndeuxième\ntroisième\n\n\n\n[Google](https://google.com)\nGoogle\n\n\n\n\n\n2.2.3 Codes R\nLe document Rmarkdown peut contenir des blocs de code R à l’aide des codes chuncks qui consistent à délimiter les codes au début avec ```{r} et ``` à la fin."
  },
  {
    "objectID": "introduction-rmarkdown.html#compiler-le-document-rmarkdown",
    "href": "introduction-rmarkdown.html#compiler-le-document-rmarkdown",
    "title": "2  Inroduction à Rmarkdown",
    "section": "2.3 Compiler le document Rmarkdown",
    "text": "2.3 Compiler le document Rmarkdown\nPour compiler le document et générer le fichier de sortie, il suffit de cliquer sur la petite flèche de l’option Knit comme montré sur l’image suivante :\n\n\n\nCompiler le document\n\n\nVous pouvez alors choisir le format de fichier de sortie que vous désirez. Une fois choisi, le fichier est généré automatiquement.\nL’image suivante montre un document compilé sous format html.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDocument compilé"
  },
  {
    "objectID": "introduction-rmarkdown.html#différents-paramètres",
    "href": "introduction-rmarkdown.html#différents-paramètres",
    "title": "2  Inroduction à Rmarkdown",
    "section": "2.4 Différents paramètres",
    "text": "2.4 Différents paramètres\n\n2.4.1 Paramètres du document\nPour accéder aux paramètres du document, il suffit de cliquer sur la petite flèche à côté de l’icône d’engrenage et à sélectionner la dernière option Output Options.... La boîte de dialogue qui s’affiche permet par exemple d’inclure la table de matières (Include table of contents), de changer le thème (Apply theme), de définir si les sections du documents seront numérotées (Number section headings). Il est même possible d’inclure un fichier CSS (Apply CSS file).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParamètres du document\n\n\n\n\n\n2.4.2 Paramètres du bloc de code R\n\n2.4.2.1 Options globales\nOn peut vouloir appliquer une option à l’ensemble des blocs d’un document. Par exemple, on peut souhaiter par défaut ne pas affcher le code R de chaque bloc dans le document final.\nEn créant le document Rmarkdown comme nous l’avons vu au début, R Rstudio inclue automatiquement un bloc de code pour les options globales. Ce bloc débute avec la ```{r setup, include=FALSE}\nComment alors modifier ces différentes options ?\nOn peut modifier les options manuellement en éditant l’en-tête du bloc de code, mais on peut aussi utiliser une petite interface graphique proposée par RStudio. Pour cela, il sufft de cliquer sur l’icône d’engrenage située à droite sur la ligne de l’en-tête de du bloc comme sur l’image :\n\n\n\nOptions globales\n\n\nCela permet de modifier quelques options que nous reprenons dans le tableau ci-dessous :\n\nOptions globales\n\n\n\n\n\n\n\nOptions\nValeurs\nDescription\n\n\n\n\necho\nTRUE/FALSE\nAfficher ou non le code R dans le document\n\n\neval\nTRUE/FALSE\nExécuter ou non le code R à la compilation\n\n\ninclude\nTRUE/FALSE\nInclure ou non le code R et ses résultats dans le document\n\n\nwarning\nTRUE/FALSE\nAfficher ou non les avertissements générés par le bloc\n\n\nmessage\nTRUE/FALSE\nAfficher ou non les messages générés par le bloc\n\n\n\n\n\n2.4.2.2 Options individuelles\nDans chaque bloc, il est aussi possible de modifier des options. Comme pour le bloc global, il sufft de cliquer sur l’icône d’engrenage située à droite sur la ligne de l’en-tête de chaque bloc.\nOn peut aussi nommer un bloc en indiquant son nom juste après le r : {r nom_du_bloc}. Cela permet par exemple en cas d’erreur lors de la compilation, d’identifier facilement le bloc à problème."
  },
  {
    "objectID": "creation-dashboard.html",
    "href": "creation-dashboard.html",
    "title": "3  Création de tableau de bord avec flexdashboard",
    "section": "",
    "text": "R est un langage de programmation populaire pour l’analyse de données, et il existe plusieurs packages pour créer des tableaux de bord. L’un des packages les plus populaires pour la création de tableaux de bord en R est le package flexdashboard. Dans ce chapitre, nous allons explorer ce package et voir comment créer un tableau de bord à l’aide de flexdashboard. Nous allons également examiner quelques exemples de code pour créer des tableaux de bord interactifs.\nAvec flexdashboard, vous pouvez créer tableaux de bords contenant une diversité d’éléments comme :\nLinstallation du package flexdashboard se fait comme celle que tout package R :"
  },
  {
    "objectID": "creation-dashboard.html#création-dun-tableau-de-bord-flexdashboard",
    "href": "creation-dashboard.html#création-dun-tableau-de-bord-flexdashboard",
    "title": "3  Création de tableau de bord avec flexdashboard",
    "section": "3.1 Création d’un tableau de bord flexdashboard",
    "text": "3.1 Création d’un tableau de bord flexdashboard\nUn tableau de bord flexdashboard est tout simplement un fichier Rmarkdown avec flexdashboard::flex_dashboard comme option de sortie.\n\n---\ntitle: \"Untitled\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: columns\n    vertical_layout: fill\n---\n\nEtant donné qu’un fichier flexdashboard est un fichier Rmarkdown, ils se créent donc de la même façon.\nIl faut donc aller dans le menu File puis en choisissant New file puis R Markdown…. La boîte de dialogue de la figure XXX s’affiche :\n\n\n\nCréation du tableau de bord\n\n\nA partir du menu de gauche, cliquez sur From Tamplate et à droite, sur la liste des templates (modèles), choisissez Flex Dashboard. Une fois la sélectionn faite, cliquez sur OK\nCela crée un fichier qui ressemble à celle sur l’image suivante.\n\n\n\nNouveau tableau de bord\n\n\nEn cliquant sur Knit pour compiler le fichier, nous obtenons un tableau de bord vide.\n\n\n\nNouveau tableau de bord - en colonne"
  },
  {
    "objectID": "creation-dashboard.html#disposition-des-objets",
    "href": "creation-dashboard.html#disposition-des-objets",
    "title": "3  Création de tableau de bord avec flexdashboard",
    "section": "3.2 Disposition des objets",
    "text": "3.2 Disposition des objets\nLes éléments dans le tableau de bord peuvent être disposés de différentes façons.\n\n3.2.1 En colonne\nL’option par défaut consiste à ranger les éléments en colonnes. Deux colonnes sont créées par défaut, mais d’autres peuvent être ajoutées en utilisant des pointillés. La largeur de chaque colonne peut également être précisée en utilisant l’option data-width, dont la valeur maximale est de 1000.\n\n\n3.2.2 En ligne\nCette disposition permet de ranger les éléments du tableau de bord par ligne, plutôt que par colonne. Sur chaque ligne, les éléments peuvent être organisés dans des colonnes. En utilisant l’option data-height, la hauteur de chaque ligne peut être ajustée, avec une valeur maximale de 1000. En modifiant orientation: rows dans l’en-tête, nous obtenons un tableau de bord rangé en ligne comme sur l’image XXX.\n\n\n\nNouveau tableau de bord - en ligne\n\n\n\n\n3.2.3 En défilement\nPar défaut, les éléments du flexdashboard s’ajustent pour remplir automatiquement la hauteur du navigateur. Ce système convient lorsque vous avez peu d’éléments à afficher à l’écran, mais si vous avez plusieurs éléments tels que des graphiques, des tableaux, etc., vous pouvez préférer une solution permettant de faire défiler les éléments plutôt que de les afficher tous sur une page fixe.\nCela est rendu possible grâce à l’option vertical_layout : scroll dans l’en-tête, qui permet de défiler verticalement entre les différents éléments. Par défaut, cette option est réglée sur fill.\n\n\n3.2.4 En onglet\nIl peut être parfois plus judicieux d’afficher les éléments du tableau de bord sous forme d’onglets, permettant ainsi de naviguer entre les différents onglets pour accéder aux informations. Cette présentation peut être réalisée en utilisant l’option .tabset sur une ligne ou une colonne du tableau.\n\n\n\n\n\n\ninsertion d’onglets\n\n\n\n\n\n\n\n\n\nNouveau tableau de bord - en ligne avec onglet\n\n\n\n\n\nEXERCICES SUR LA MISE EN PAGE"
  },
  {
    "objectID": "creation-dashboard.html#composants-du-tableau-de-bord",
    "href": "creation-dashboard.html#composants-du-tableau-de-bord",
    "title": "3  Création de tableau de bord avec flexdashboard",
    "section": "3.3 Composants du tableau de bord",
    "text": "3.3 Composants du tableau de bord\n\n3.3.1 Les composants html widget\nsont des visualisations basées sur javascript. Il y a plusieurs mais ici nous ne verrons que deux :\n\nleaflet : permet de créer des cartes interactives\n\nPlotly : permet de graphiques dynamiques\n\n\nlibrary(leaflet)\n\nleaflet() %>% \n  addTiles() %>% \n  addMarkers(lat = 15.6, lng = 4.6)\n\n\n\n\n\n\n\n3.3.2 Les graphiques R\n\nLes graphiques de base\nles graphiques ggplot2\net les autres\n\nDans la suite, nous allons utiliser les graphiques ggplot2 dont voici un exemple :\n\nlibrary(tidyverse)\n\niris %>% \n  ggplot(aes(x = Species, y = Sepal.Length, fill = Species)) + \n  geom_boxplot(show.legend = F) + \n  theme_minimal()\n\n\n\n\nLes différentes techniques de visualisation graphique sont abordées dans notre formation sur la visualisation de données avec R\nLa taille d’un élément individuel (ex : un graphique) peut être réglée avec fig.width pour la largeur et fig.height pour la hauteur.\n\n\n3.3.3 Tableau de données\n\nSimple tableau avec kable : Le tableau simple est idéal pour afficher un tableau de petite taille\n\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\nTableau dynamique avec DT (filtrage) : Idéal pour des grands tableaux\n\n\nlibrary(DT)\n\ndatatable(iris)\n\n\n\n\n\n\nEn intégrant ces différents composants, nous obtenons un tableau de bord ressemblant à l’image XXX\n\n\n\nTableau de bord avec différents composants\n\n\n\n\n3.3.4 ValueBox\nSouvent on a besoin d’inclure dans le tableau de bord la valeur d’un indicateur, accompagé d’un texte et d’une icône. Cela peut être réalisé avec la commande valueBox(). On peut afficher la valeur émanant d’une fonction.\nvalueBox() a quelques arguments comme :\n\nvalue : c’est la valeur qui est affichée. Il peut s’gir d’une native ou celle définie par l’utilisateur.\ncolor : la couleur. Les différentes couleurs sont primary (par défaut), info, success. Vous pouvez aussi utiliser les noms de couleur en anglais ou les couleurs CSS valides (ex : #ffffff).\nicon : l’icone. D’autres icones peuvent être trouvées ici https://fortawesome.github.io/Font-Awesome/icons/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nValueBox\n\n\n\n\n\n\n\n3.3.5 Gauges\nLes Gauges permettent d’afficher la valeur d’un indicateur avec en précisant le minimum et le maximum. Une courbe indique la progression de l’indicateur et la couleur correspondante.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGauge\n\n\n\n\n\nVoici quelques caractéristiques sur les gauges dont il faut savoir :\n\nIl y a trois arguments obligatoires : value pour la valeur de l’indicateur, min et max pour le minimum et le maximum respectivement\nUn argument facultatif, symbol peut être ajouté pour afficher un symbole à côté de la valeur de l’indicateur.\nAvec gaugeSectors(), vous pouvez définir les couleurs selon les intervalles de valeurs de l’indicateur avec les mots “success” “warning”, and “danger”\n\n\n\n3.3.6 Bar de navigation\nPar défaut, la barre de navigation affiche le titre du tableau de bord. Vous pouvez ajouter des liens de partage les réseaux sociaux ou vers les codes.\nCi-après nous ajoutons un lien de partage avec social et intégrons le code source avec source_code.\nConcernant le partage, lorsqu’on spécifie uniquement le mot “menu”, une liste déroulante des réseaux sociaux s’affiche.\nLe code source du tableau de bord peut être inclus directement dans le tableau de bord avec source_code : embed ou en fournissant l’URL de github par exemple.\n\n---\ntitle: \"Dashboard+\"\noutput: \n  flexdashboard::flex_dashboard:\n    social: [ \"twitter\", \"facebook\", “linkedin”]\n    source_code: embed\n---\n\n\n\n\nBar de navigation\n\n\nEn cliquant sur “Source code”, le code source s’affiche dans une boîte de dialogue.\n\n\n3.3.7 Titre et notes\nLes titres peuvent être précisés avec le symbole ### suivi du nom. Par exemple ### Distribution des ménages\nLes notes sont précisées en bas du bloc chunk avec le signe >\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTitre et notes"
  },
  {
    "objectID": "creation-dashboard.html#page-multiple",
    "href": "creation-dashboard.html#page-multiple",
    "title": "3  Création de tableau de bord avec flexdashboard",
    "section": "3.4 Page multiple",
    "text": "3.4 Page multiple\nLorsque vous avez plusieurs informations à afficher, vous pouvez les répartir entre différentes pages.\nPour définir une page, il suffit de commencer par des signes égale =======================.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPage multiple\n\n\n\n\n\n\n3.4.1 Orientation de la page\nLorsque votre tableau de bord comporte plusieurs pages, vous avez la possibilité de choisir l’orientation de chaque page. Vous pouvez déterminer l’orientation (disposition) grâce à l’option data-orientation qui peut être égale à rows pour indiquer une disposition par ligne.\n\n\n\nOrientation de page\n\n\n\n\n3.4.2 Navigation entre pages\nPar défaut, chaque page incluse dans le tableau de bord apparait automatiquement sur la barre de navigation. Lorsque vous disposez de plusieurs pages, il peut être intéressant de créer une liste déroulante permettant d’accéder aux différentes pages. Cela est réalisé avec l’option data-navmenu. Un exemple est donné ci-après :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigation entre pages"
  },
  {
    "objectID": "creation-dashboard.html#storyboards",
    "href": "creation-dashboard.html#storyboards",
    "title": "3  Création de tableau de bord avec flexdashboard",
    "section": "3.5 Storyboards",
    "text": "3.5 Storyboards\nLes storyboards sont des mises en page interactives qui permettent d’agencer des visualisations de données diverses et d’autres contenus dans une trame narrative. Ils sont particulièrement utiles pour la communication et la présentation des résultats de données et peuvent être personnalisés pour offrir une expérience utilisateur dynamique. Ils sont une alternative à la mise page basée sur les lignes et les colonnes.\n\n3.5.1 Création du storyboard\nPour créer un storyboard, il suffit d’ajouter l’option storyboard: true dans l’entête du tableau de bord.\n\n---\ntitle: \"Storyboard\"\noutput: \n  flexdashboard::flex_dashboard:\n    storyboard: true\n---\n\nEnsuite, il faut ajouter un ensemble de composants de tableau de bord de niveau 3 (###). Chaque composant se verra attribuer son écran dans le storyboard avec le titre de la section utilisé comme légende de navigation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstoryboard\n\n\n\n\n\nComme on peut le voir sur l’image, le symbole > permet d’ajouter une note en bas de la visualisation. Des commentaires quand à eux peuvent être ajoutés après le symbole ---. Dans le storyboard, les commentaires apparaitront à droite de chaque visualisation.\n\n\n3.5.2 Page storyboard\nIl est possible de paramétrer une page comme storyboard et d’autres pages avec une autre disposition. Pour cela, il suffit d’indiquer l’option .storyboard dans la déclaration de la page comme suit :\n\n\n\nPage storyboard"
  },
  {
    "objectID": "creation-dashboard.html#themes",
    "href": "creation-dashboard.html#themes",
    "title": "3  Création de tableau de bord avec flexdashboard",
    "section": "3.6 Themes",
    "text": "3.6 Themes\nIl est possible de modifier l’apparence du tableau de bord en changeant le theme de celui-ci. flexdashboard dispose une grande variété de themes. Par défaut, c’est cosmos qui est choisi. Le thème peut être défini dans l’entête du tableau de bord avec l’option theme: coscos.\nLes thèmes disponibles sont les suivants :\n\ncosmo\nbootstrap\ncerulean\njournal\nflatly\nreadable\nspacelab\nunited\nlumen\npaper\nsandstone- simplex\nyeti\n\nLes images ci-après montrent l’utilisation des thèmes journal et spacelab.\n\n\n\n\n\n\nthème journal\n\n\n\n\n\n\n\n\n\nthème spacelab"
  },
  {
    "objectID": "projets.html",
    "href": "projets.html",
    "title": "4  Projets",
    "section": "",
    "text": "Utilisé pour l’enquête comportementale liée au paludisme en République Démocratique du Congo en 2021, ce tableau de bord a servi à suivre l’évolution de la collecte de données dans les 15 provinces du pays où la collecte de données s’est déroulée.\nPour créer ce tableau de bord, les packages suivants été utilisés :\n\nlibrary(flexdashboard)\nlibrary(haven)\nlibrary(foreign)\nlibrary(leaflet)\nlibrary(tidyverse)\nlibrary(kableExtra)\nlibrary(knitr)\n\nVous pouvez télécharger les codes en cliquant ici.\n\n\n\nMBS-RDC-Dashboard\n\n\nLa version en ligne disponible ici"
  }
]